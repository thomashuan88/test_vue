npm create vue@latest (create new project)
npm install (gen node_modules)


-- in Vite project, index.html is entry point
-- use createApp to start instant

vue2 is OptionsAPI
vue3 is CompositionAPI

start vue3 with setup
cannot use 'this' in setup() -- undefined

-- install a vue plugin for script setup tag to tag the component name
npm i vite-plugin-vue-setup-extend -D
need to modify vite.config.ts

-- use ref to reflect variable at render
import {ref} from vue
let name = ref('jack')
in function ==> name.value = 'bob'

ref ==> for basic data type
reactive ==> for object data type

import {reactive} from vue
let car = reactive({name:'bmw', price:100})

ref ==> can define basic data type, object data type
reactive ==> just define object data type

-- when using ref for object, the value part still using reactive(Proxy object)

-- when reactive want to replace whole object
Object.assign(car, {brand:'benz',price:10})

toRefs return => ObjectRefImpl

v-bind:value ==> one way binding (data to page)
v-model:value | v-model ==> two way binding (data to page & page to data)

-- about computed, have cache, no change no redo, if use func will redo everytime
import { computed } from vue
let fullName = computed(() => firstName.value.slice(0, 1).toUpperCase() + firstName.value.slice(1) + '-' + lastName.value)

-- computed can read/write
let fullName = computed({
    get() {
        console.log('get')
        return (firstName.value.slice(0, 1).toUpperCase() + firstName.value.slice(1) + '-' + lastName.value)
    },
    set(value) {
        console.log('set')
        let arr = value.split('-')
        firstName.value = arr[0]
        lastName.value = arr[1]
    }
})

-- 4 kinds of watch to monitor
1. data defined by ref
2. data defined by reactive
3. value return from function (getter function)
4. an array which content 1,2,3 above


-- getter function means this function can return a value

<style scoped> those css just use at current vue file

let x = defineProps(['a','b'])
console.log(x)
Proxy(Object) {a:'haha', b:'hehe'}

<h2 a="1+1" :b="1+1" c="x" :d="x">haha</h2> :: let x = 9
<h2 a="1+1" b="2" c="x" d="9">haha</h2>

lifecycle vue2
-- beforeCreate, created
-- beforeMount, mounted
-- beforeUpdate, updated
-- beforeDestroy, destroyed